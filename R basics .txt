Useful are commandsCommandFunction Cused to create a vector, for example x = c(1, 2, 3)-cgives you all the values but the ones you included in bracketsseq(1,10,2)gives 1,3,5 … 9rep(“ash”,4)will repeat the name ash 4 timesrep(seq(1,100,25),4)combines both seq and rep together where it will repeat the numbers from 1 to 100 by the addition of 25 four time[]used to extract an element from a vector, for example if x is c(1, 7, 9) x[2] will be 7 etcMatrixused to create tables with certain numbers of rows and columns, for example to generate a table of 9 numbers for x, it can be written as; x = matrix(c(1:9) , nrow = 3, byrow = TRUE)Read.tableit reads a file in table format and creates a data frame from itSephow the abbreviation in the table are separatedDimshows the dimensions of the data, like how many rows, columns.Headshows the first 6 rows of the data tableTailshows the last 6 rows of the data tableNamesgives you the titles of the data table.$used when you want to extract a single variable from a whole data, for example if you have if you want the mean of males in gender data, the code mean(male) will not work, hence the dollar sign can be used in this situation, where the code will look like this --> mean(gender$male). A recommendation to get male without the dollar sign every time you want it, is to store gender$male in a male object. Also, a more advanced was can be done by the command ‘attach()’ where if you attach the data into are you can search for the variable without the dollar sign. Classgives you the type of data in the table, e.g. numeric, integer or factor.Levelsgives you the different types of factors in a specific factor column, such as yes/no, or male/female Summarya very important command that gives you the summary of every variable, such as how many are male and how many are females, and how many smokes and how many does not.  Table: gives you the summary of a particular variable (column)as.factorconverts numeric variables into characters. ==used to direct R into a specific category of a variablecbindcomines a set of new data to the column or rows of the original dataInstall.packagesa command that install useful packages.Remove.packagesa command that removes packages.Library(name of the package)gives you the ability to use the command in this particular package, and every time you want to use this package you have to load the library first. help(package = PACKAGE NAME)gives you the help to access all the commands to this package. Applyis a function that has 3 main components; X: is the object that we would like to apply some function to, MARGIN: specifies if the function is applied to rows (1) or columns (2), FUN: is the function the we would like to apply. For example, to calculate the mean of all columns in the data, the apply code will look like this --> apply(X=the object, MARGIN=2, FUN=mean). If some data is missing, you can use the command na.rm=TRUE to remove all missing values from the data, and it will look like this --> apply(X=the object, MARGIN=2, FUN=mean, na.rm=TRUE).#in the apply function many other FUNs can be used, such as sum, max, and plot, is a plot needs to be used, its code will look like this --> apply(X=the subject, Margin=2, FUN=plot, type=”l”), where in this case the type function determine the shape of the plot, and “l” means it is linear.  Additional functions can be added to the code to further label and plot, for example, main (for the “title”), xlab (for “x” axis), and ylab(for “y”  axis). colMean and rowMeanare apply functions specific to either the mean of columns or rows only, and it looks like this --> colMeans(the subject, na.rm=TRUE). colSums and rowSumsare apply functions specific to either the sum of columns or rows only, and it looks like this --> colSums(the subject, na.rm=TRUE). Quantile:gives you the percentage of a specific column, its code can be written as; quantile(column variable name, prob = the percentage you need e.g. 0.5, 0.75). For loopin R is similar to python but in R you use parentheses after the for loop, and curly brackets for the whole loop , for example; for (x in y) {      Print(x) }Creating Function Creating a function in R is different, as you need to use the command “function to do that, for example;take_sample <- function(p, N) {    X <- sample(c(0,1), size = N, replace = TRUE, prob = c(1 - p, p))    mean(X)take_sample(p, N)Mutate Adds columns into an existing table, for example; mutate(    new columns name = existing columns name,     )Tab(->|) button: gives you options that you might be looking for, for example if you type “m” and then click tab, R will give you all the possible commands. If you have a data of two genders, you can separate the genders via the following code --> FemData = TheDataName[Gender==”female”, ], same code for males, and notes that a scape was left after the comma, which tells R to include all columns. If you have to extract a specific gender (male) with a specific age, let’s say bigger that 50, then the following code can be used --> MaleOver50 = TheDataName[Gender==”male” & Age > 50, ] When you want open a csv file, you can use the following code; Name of the subject = read.csv(file. (), header=T, row.names=1, sep=",")? When you want to export a csv file, you can use the following code;Write.csv(data name, file = name of the file on the folder, header=T)#If you want to make a plot specific for the mean or sum, a different code will be required, where it will look like this --> plot(apply(X=the object, MARGIN=2, FUN=mean, type=”l”, main=”title”, xlab=”x axis”, ylab=”y axis”). Barplot: it is a command made specifically for bar diagrams, its code is similar to the plot code, instead, the type command does not need to be used, as it is a specific code, the barplot code looks like this --> barlpot(set of data name, main = “title” ”, xlab=”x axis”, ylab=”y axis”, names.arg=c(first name, second name). The ‘names.age’ function allows you to change the axis names of the bars. Further, you can change the direction to the barplot by adding the function ‘horiz=TRUE’ but make sure you change the X and Y axis as well. Another useful feature that can be used is ‘ylim=c(from:to)’, which limits the values of the y axis. Pie: is another function to create a pie chart, where similar to the barplot function the code looks like this --> pie(set of data name, main = “title”), a box can be added by the ‘box()’ function in a separate line of code.t.test: a statistical test to examine the a set of data, for example, if you want to examine the hypothesis of the mean less than 8, the following code can be used --> t.test(name of data needs to be tested, mu=8, alternative = “less”, conf.levels=0.99), etc. # connecting R studio to GitHub;git config --global user.name "ashormuftah"git config --global user.email ashormohsen1@yahoo.com 